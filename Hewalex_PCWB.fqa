{
    "name": "Hewalex PCWB",
    "type": "com.fibaro.hvacSystemHeat",
    "apiVersion": "1.2",
    "initialProperties": {
        "viewLayout": {
            "$jason": {
                "body": {
                    "header": {
                        "style": {
                            "height": "0"
                        },
                        "title": "aquatemp-thermostat"
                    },
                    "sections": {
                        "items": [
                            {
                                "components": [
                                    {
                                        "name": "label",
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "text": "Hewalex PCWB integration",
                                        "type": "label",
                                        "visible": true
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "btn_1",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Aktualizuj dane",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "btn_2",
                                                "style": {
                                                    "weight": "0.50"
                                                },
                                                "text": "Szukaj urządzeń",
                                                "type": "button",
                                                "visible": true
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            },
                            {
                                "components": [
                                    {
                                        "components": [
                                            {
                                                "name": "t1",
                                                "style": {
                                                    "weight": "0.25"
                                                },
                                                "text": "0 C",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "t2",
                                                "style": {
                                                    "weight": "0.25"
                                                },
                                                "text": "0 C",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "t3",
                                                "style": {
                                                    "weight": "0.25"
                                                },
                                                "text": "0 C",
                                                "type": "button",
                                                "visible": true
                                            },
                                            {
                                                "name": "t4",
                                                "style": {
                                                    "weight": "0.25"
                                                },
                                                "text": "0 C",
                                                "type": "button",
                                                "visible": true
                                            }
                                        ],
                                        "style": {
                                            "weight": "1.2"
                                        },
                                        "type": "horizontal"
                                    },
                                    {
                                        "style": {
                                            "weight": "0.5"
                                        },
                                        "type": "space"
                                    }
                                ],
                                "style": {
                                    "weight": "1.2"
                                },
                                "type": "vertical"
                            }
                        ]
                    }
                },
                "head": {
                    "title": "aquatemp-thermostat"
                }
            }
        },
        "uiCallbacks": [
            {
                "callback": "refreshEvent",
                "eventType": "onReleased",
                "name": "btn_1"
            },
            {
                "callback": "searchEvent",
                "eventType": "onReleased",
                "name": "btn_2"
            },
            {
                "callback": "t1Event",
                "eventType": "onReleased",
                "name": "t1"
            },
            {
                "callback": "t2Event",
                "eventType": "onReleased",
                "name": "t2"
            },
            {
                "callback": "t3Event",
                "eventType": "onReleased",
                "name": "t3"
            },
            {
                "callback": "t4Event",
                "eventType": "onReleased",
                "name": "t4"
            }
        ],
        "quickAppVariables": [
            {
                "name": "Username",
                "type": "string",
                "value": ""
            },
            {
                "name": "Password",
                "type": "password",
                "value": 
            },
            {
                "name": "Interval",
                "type": "string",
                "value": "30"
            },
            {
                "name": "DeviceID",
                "type": "string",
                "value": ""
            }
        ],
        "typeTemplateInitialized": true
    },
    "files": [
        {
            "name": "main",
            "isMain": true,
            "isOpen": true,
            "content": "--[[\n    Hewalex Pool Heat Pump integration\n    @author ikubicki\n]]\n\nfunction QuickApp:setThermostatMode(mode)\n    if self.properties.thermostatMode ~= \"Heat\" and mode == \"Heat\" then\n        QuickApp:debug(\"Heat on\")\n        self:_setMode(\"Heat\")\n    elseif self.properties.thermostatMode ~= \"Silent\" and mode == \"Silent\" then\n        QuickApp:debug(\"Heat on (silent)\")\n        self:_setMode(\"Silent\")\n    elseif self.properties.thermostatMode ~= \"Off\" and mode == \"Off\" then\n        QuickApp:debug(\"Heat off\")\n        self:_setMode(\"Off\")\n    else \n        QuickApp:debug(\"Heat reamins \" .. self.properties.thermostatMode)\n    end\nend\n\nfunction QuickApp:setHeatingThermostatSetpoint(value) \n    self:debug(\"Value set to \" .. value)\n    if value > 35 then\n        value = 35\n    end\n    if value < 15 then\n        self:_setTemperature(16)\n        self:setThermostatMode(\"Off\")\n        return false\n    end\n    if value >= 15 then\n        self:setThermostatMode(\"Heat\")\n    end\n    self:_setTemperature(value)\nend\n\n\nfunction QuickApp:_setMode(value)\n    \n    local modeCallback = function(data)\n        self:updateDevices()\n    end\n    if value == \"Off\" then\n        local muteCallback = function(data)\n            self.aquatemp:setPower(0, modeCallback)\n        end\n        self.aquatemp:setMute(0, muteCallback)\n    elseif value == \"Silent\" then\n        local muteCallback = function(data)\n            self.aquatemp:setPower(1, modeCallback)\n        end\n        self.aquatemp:setMute(1, muteCallback)\n    else\n        local muteCallback = function(data)\n            self.aquatemp:setPower(1, modeCallback)\n        end\n        self.aquatemp:setMute(0, muteCallback)\n    end\n    self:ui_setMode(value)\nend\n\nfunction QuickApp:ui_setMode(value)\n    self:updateProperty(\"thermostatMode\", value)\nend\n\nfunction QuickApp:_setTemperature(value)\n    local temperatureCallback = function(data)\n        self:updateDevices()\n    end\n    self.aquatemp:setTemperature(value, temperatureCallback)\n    self:ui_setTemperature(value)\nend\n\nfunction QuickApp:ui_setTemperature(value)\n    self:updateProperty(\"heatingThermostatSetpoint\", { value = value })\nend\n\nfunction QuickApp:onInit()\n\n    self.config = Config:new(self)\n    self.aquatemp = AquaTemp:new(self.config)\n    self.i18n = i18n:new(api.get(\"/settings/info\").defaultLanguage)\n    self:trace('')\n    self:trace(string.format(self.i18n:get('name'), self.name))\n    self:updateProperty('manufacturer', 'Hewalex')\n    self:updateProperty('model', 'Pool water heat pump')\n\n    self.childrenIDs = {}\n    self.powerStatus = nil\n\n    -- set supported modes for thermostat\n    self:updateProperty(\"supportedThermostatModes\", {\"Off\", \"Heat\", \"Silent\"})\n    self:updateProperty(\"heatingThermostatSetpointCapabilitiesMin\", 15)\n    self:updateProperty(\"heatingThermostatSetpointCapabilitiesMax\", 35)\n    self:updateProperty(\"heatingThermostatSetpointStep\", {\n        C = 1,\n        F = 1\n    })\n    \n    self:setupChildren()\n\n    -- setup default values\n    self:ui_setTemperature(15)\n    self:ui_setMode(\"Off\")\n    self:run()\nend\n\nfunction QuickApp:run()\n    self:updateDevices()\n    local interval = self.config:getInterval()\n    if self.properties.dead then\n        interval = 3600000\n    end\n    if interval > 0 then\n        fibaro.setTimeout(interval, function() self:run() end)\n    end\nend\n\nfunction QuickApp:updateButton1(text)\n    self:updateView(\"btn_1\", \"text\", text)\nend\n\nfunction QuickApp:updateButton2(text)\n    self:updateView(\"btn_2\", \"text\", text)\nend\n\nfunction QuickApp:updateLabel(text)\n    self:updateView(\"label\", \"text\", text)\nend\n\nfunction QuickApp:updateT1(text)\n    local unit = self.properties.unit\n    self:updateView(\"t1\", \"text\", text .. \" º\" .. unit)\nend\n\nfunction QuickApp:updateT2(text)\n    local unit = self.properties.unit\n    self:updateView(\"t2\", \"text\", text .. \" º\" .. unit)\nend\n\nfunction QuickApp:updateT3(text)\n    local unit = self.properties.unit\n    self:updateView(\"t3\", \"text\", text .. \" º\" .. unit)\nend\n\nfunction QuickApp:updateT4(text)\n    local unit = self.properties.unit\n    self:updateView(\"t4\", \"text\", text .. \" º\" .. unit)\nend\n\nfunction QuickApp:updateDevices()\n\n    if self.config:getDeviceID() == nil or self.config:getDeviceID() == \"\" then\n        return\n    end\n\n    self:updateButton1(self.i18n:get('refreshing'))\n\n    local fail = function(data)\n        self:updateButton1(self.i18n:get('refresh'))\n        QuickApp:error('Unable to pull data for AquaTemp device')\n        QuickApp:error(json.encode(data))\n    end\n\n    local getPropertiesCallback = function(data)\n        -- QuickApp:debug(json.encode(data))\n        self:updateButton1(self.i18n:get('refresh'))\n        if data[\"status\"] == \"OFFLINE\" then\n            self:updateProperty(\"dead\", true)\n            self:updateProperty(\"deadReason\", \"Device offline\")\n            self:updateLabel(string.format(self.i18n:get('device-error'), 'ERROR'))\n            self:updateLabel(self.i18n:get('device-unavailable'))\n\n            self.childDevices[self.childrenIDs[1]]:setDead(true, \"Device offline\")\n            self.childDevices[self.childrenIDs[2]]:setDead(true, \"Device offline\")\n            self.childDevices[self.childrenIDs[3]]:setDead(true, \"Device offline\")\n            self:ui_setMode(\"Off\");\n        else\n            self:updateProperty(\"dead\", false)\n            self:updateProperty(\"deadReason\", \"\")\n            self:updateLabel(string.format(self.i18n:get('last-update'), os.date('%Y-%m-%d %H:%M:%S')))\n\n            local powerChange = (self.powerStatus == data[\"power\"])\n            self.powerStatus = data[\"power\"]\n\n            if data[\"power\"] == \"0\" then\n                self:ui_setMode(\"Off\")\n                self:updateLabel(self.i18n:get('device-off'))\n            elseif data[\"power\"] == \"1\" and data[\"mute\"] == \"1\" then\n                self:ui_setMode(\"Silent\")\n            else\n                self:ui_setMode(\"Heat\")\n            end\n            if data[\"is_fault\"] then\n                -- @todo fault message handling\n                self:updateLabel(string.format(self.i18n:get('last-update'), '<unknown>'))\n            end\n            self.childDevices[self.childrenIDs[1]]:setDead(false, \"\")\n            self.childDevices[self.childrenIDs[2]]:setDead(false, \"\")\n            self.childDevices[self.childrenIDs[3]]:setDead(false, \"\")\n            if data[\"power\"] == \"1\" then\n                self.childDevices[self.childrenIDs[1]]:setUnit(data[\"temperature_unit\"])\n                self.childDevices[self.childrenIDs[1]]:setValue(data[\"inlet_temperature\"])\n                self.childDevices[self.childrenIDs[2]]:setUnit(data[\"temperature_unit\"])\n                self.childDevices[self.childrenIDs[2]]:setValue(data[\"outlet_temperature\"])\n                self.childDevices[self.childrenIDs[3]]:setUnit(data[\"temperature_unit\"])\n                self.childDevices[self.childrenIDs[3]]:setValue(data[\"ambient_temperature\"]) \n            elseif powerChange then\n                self.childDevices[self.childrenIDs[1]]:setValue(0)\n                self.childDevices[self.childrenIDs[2]]:setValue(0)\n                self.childDevices[self.childrenIDs[3]]:setValue(0) \n            end\n            self:updateT2(data[\"inlet_temperature\"])\n            self:updateT3(data[\"outlet_temperature\"])\n            self:updateT4(data[\"ambient_temperature\"])\n        end\n        self:updateProperty(\"unit\", data[\"temperature_unit\"])\n        self:ui_setTemperature(tonumber(data[\"temperature_setpoint\"]))\n        self:updateProperty(\"heatingThermostatSetpointCapabilitiesMin\", tonumber(data[\"minimum_temperture\"]))\n        self:updateProperty(\"heatingThermostatSetpointCapabilitiesMax\", tonumber(data[\"maximum_temperture\"]))\n        self:updateT1(data[\"temperature_setpoint\"])\n    end\n\n    self.aquatemp:getProperties(getPropertiesCallback, fail)\nend\n\nfunction QuickApp:setupChildren()\n\n    self:initChildDevices({\n        [\"com.fibaro.temperatureSensor\"] = AquaTempChild,\n    })\n\n    id = 0\n    for _, device in pairs(self.childDevices) do\n        id = id + 1\n        table.insert(self.childrenIDs, device.id)\n    end\n\n    if self.config:getDeviceID() == \"\" or self.config:getDeviceID() == nil then\n        if id > 0 then\n            QuickApp:warning(\"Found \" .. id .. \" child devices for no device\")\n            for _, deviceId in pairs(self.childrenIDs) do\n                -- api.delete(\"/devices/\" .. deviceId)\n            end\n        end\n    else \n        table.sort(self.childrenIDs)\n        \n        if #self.childrenIDs < 3 then\n            QuickApp:warning(\"Adding child devices for device \" .. self.config:getDeviceID())\n        else \n            return\n        end\n        if #self.childrenIDs < 1 then\n            table.insert(self.childrenIDs, self:createChild(self.i18n:get(\"device1-label\"), \"com.fibaro.temperatureSensor\").id)\n        end\n        if #self.childrenIDs < 2 then\n            table.insert(self.childrenIDs, self:createChild(self.i18n:get(\"device2-label\"), \"com.fibaro.temperatureSensor\").id)\n        end\n        if #self.childrenIDs < 3 then\n            table.insert(self.childrenIDs, self:createChild(self.i18n:get(\"device3-label\"), \"com.fibaro.temperatureSensor\").id)\n        end\n    end\nend\n\nfunction QuickApp:createChild(name, type, class)\n    return self:createChildDevice({\n        name = name, type = type\n    }, AquaTempChild)\nend\n\nfunction QuickApp:refreshEvent(event)\n    self:updateDevices()\nend\n\nfunction QuickApp:t1Event(event)\n    self:updateLabel(string.format(self.i18n:get('t1'), self.properties.heatingThermostatSetpoint.value, self.properties.unit))\nend\n\nfunction QuickApp:t2Event(event)\n    self:updateLabel(string.format(self.i18n:get('t2'), self.childDevices[self.childrenIDs[1]].properties.value, self.properties.unit))\nend\n\nfunction QuickApp:t3Event(event)\n    self:updateLabel(string.format(self.i18n:get('t3'), self.childDevices[self.childrenIDs[2]].properties.value, self.properties.unit))\nend\n\nfunction QuickApp:t4Event(event)\n    self:updateLabel(string.format(self.i18n:get('t4'), self.childDevices[self.childrenIDs[3]].properties.value, self.properties.unit))\nend\n\nfunction QuickApp:searchEvent(param)\n    self:debug(self.i18n:get('searching-devices'))\n    self:updateButton2(self.i18n:get('searching-devices'))\n    local searchDevicesCallback = function(devices)\n        -- QuickApp:debug(json.encode(devices))\n        self:updateButton2(self.i18n:get('search-devices'))\n        -- printing results\n        for _, device in pairs(devices) do\n            QuickApp:trace(string.format(self.i18n:get('search-row-device'), device.name, device.code, device.status))\n        end\n\n        if #devices == 1 then\n            self:updateLabel(string.format(self.i18n:get('assigning-device'), devices[1].code))\n            self.config:setDeviceID(devices[1].code)\n            self:setupChildren()\n        else\n            self:updateLabel(string.format(self.i18n:get('check-logs'), 'QUICKAPP' .. self.id))\n        end\n    end\n    self.aquatemp:searchDevices(searchDevicesCallback)\nend\n\nfunction QuickApp:wakeUpDeadDevice()\n    self:updateDevices()\nend\n\n\n"
        },
        {
            "name": "AquaTempChild",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nAquaTemp child device handler\n@author ikubicki\n]]\n\nclass 'AquaTempChild' (QuickAppChild)\n\nfunction AquaTempChild:__init(device)\n    QuickAppChild.__init(self, device)\nend\n\nfunction AquaTempChild:setUnit(unit)\n    self:updateProperty(\"unit\", unit)\nend\n\nfunction AquaTempChild:setValue(value)\n    self:updateProperty(\"value\", tonumber(value))\nend\n\nfunction AquaTempChild:setDead(dead, deadReason)\n    self:updateProperty(\"dead\", dead)\n    self:updateProperty(\"deadReason\", deadReason)\nend"
        },
        {
            "name": "Config",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nConfiguration handler\n@author ikubicki\n]]\nclass 'Config'\n\nfunction Config:new(app)\n    self.app = app\n    self:init()\n    return self\nend\n\nfunction Config:getUsername()\n    if self.username and self.username:len() > 3 then\n        return self.username\n    end\n    return nil\nend\n\nfunction Config:getPassword()\n    return self.password\nend\n\nfunction Config:getDeviceID()\n    return self.device_id\nend\n\nfunction Config:setDeviceID(device_id)\n    self.app:setVariable(\"DeviceID\", device_id)\n    self.device_id = device_id\nend\n\nfunction Config:getInterval()\n    return tonumber(self.interval) * 1000\nend\n\nfunction Config:getUrl()\n    return self.url\nend\n\n--[[\nThis function takes variables and sets as global variables if those are not set already.\nThis way, adding other devices might be optional and leaves option for users, \nwhat they want to add into HC3 virtual devices.\n]]\nfunction Config:init()\n    self.username = self.app:getVariable('Username')\n    self.password = self.app:getVariable('Password')\n    self.device_id = self.app:getVariable('DeviceID')\n    self.url = self.app:getVariable('URL')\n\n    if string.len(self.url) < 1 then\n        self.url = 'https://cloud.linked-go.com/cloudservice/api'\n    end\n\n    self.interval = self.app:getVariable('Interval')\n\n    local storedUsername = Globals:get('aquatemp_username', '')\n    local storedPassword = Globals:get('aquatemp_password', '')\n    -- handling username\n    if string.len(self.username) < 4 and string.len(storedUsername) > 3 then\n        self.app:setVariable(\"Username\", storedUsername)\n        self.username = storedUsername\n    elseif (storedUsername == '' and self.username) then\n        Globals:set('aquatemp_username', self.username)\n    end\n    -- handling password\n    if string.len(self.password) < 4 and string.len(storedPassword) > 3 then\n        self.app:setVariable(\"Password\", storedPassword)\n        self.password = storedPassword\n    elseif (storedPassword == '' and self.password) then -- or storedPassword ~= self.password then\n        Globals:set('aquatemp_password', self.password)\n    end\n    -- handling interval\n    if not self.interval or self.interval == \"\" then\n        self.app:setVariable(\"Interval\", \"30\")\n        self.interval = \"30\"\n    end\nend"
        },
        {
            "name": "i18n",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nInternationalization tool\n@author ikubicki\n]]\nclass 'i18n'\n\nfunction i18n:new(langCode)\n    if phrases[langCode] == nil then\n        langCode = \"en\"\n    end\n    self.phrases = phrases[langCode]\n    return self\nend\n\nfunction i18n:get(key)\n    if self.phrases[key] then\n        return self.phrases[key]\n    end\n    return key\nend\n\nphrases = {\n    pl = {\n        ['name'] = 'Termostat Hewalex PCWB',\n        ['refresh'] = 'Aktualizuj dane',\n        ['refreshing'] = 'Proszę czekać...',\n        ['device-updated'] = 'Zaktualizowano dane',\n        ['device-unavailable'] = 'Urządzenie niedostepne',\n        ['last-update'] = 'Ostatnia aktualizacja: %s',\n        ['device-off'] = 'Urządzenie wyłączone',\n        ['device-error'] = 'Błąd urządzenia: %s',\n\n        ['search-devices'] = 'Szukaj urządzeń',\n        ['searching-devices'] = 'Szukam...',\n        ['not-configured'] = 'Urządzenie nie skonfigurowane',\n        ['check-logs'] = 'Zakończono wyszukiwanie. Sprawdź logi tego urządzenia: %s',\n        ['search-row-device'] = '__ URZĄDZENIE %s (# %s) - STAN: %s',\n        ['assigning-device'] = 'Automatycznie przypisano kod urządzenia: %s',\n\n        ['device1-label'] = 'Temperatura wejściowa',\n        ['device2-label'] = 'Temperatura wyjściowa',\n        ['device3-label'] = 'Temperatura otoczenia',\n        ['t1'] = 'Temperatura nastawiona: %.1fº%s',\n        ['t2'] = 'Temperatura wejściowa: %.1fº%s',\n        ['t3'] = 'Temperatura wyjściowa: %.1fº%s',\n        ['t4'] = 'Temperatura otoczenia: %.1fº%s',\n        ['fault'] = 'Pompa zgłosiła błąd: %s'\n    },\n    en = {\n        ['name'] = 'Hewalex Pool Heat Pump thermostat',\n        ['refresh'] = 'Refresh data',\n        ['refreshing'] = 'Please wait...',\n        ['device-updated'] = 'Temperature sensor updated',\n        ['device-unavailable'] = 'Device unavailable',\n        ['last-update'] = 'Last update: %s',\n        ['device-off'] = 'Device turned off',\n        ['device-error'] = 'Communication error: %s',\n\n        ['search-devices'] = 'Search devices',\n        ['searching-devices'] = 'Searching...',\n        ['not-configured'] = 'Device not configured',\n        ['check-logs'] = 'Search complete. Check logs of this device: %s',\n        ['search-row-device'] = '__ DEVICE %s (# %s) - STATE: %s',\n        ['assigning-device'] = 'Automatically assigned device code: %s',\n\n        ['device1-label'] = 'Inlet temperature',\n        ['device2-label'] = 'Outlet temperature',\n        ['device3-label'] = 'Ambient temperature',\n        ['t1'] = 'Setpoint temperature: %.1f º%s',\n        ['t2'] = 'Inlet temperature: %.1f º%s',\n        ['t3'] = 'Outlet temperature: %.1f º%s',\n        ['t4'] = 'Ambient temperature: %.1f º%s',\n        ['fault'] = 'Pump fault: %s'\n    }\n}"
        },
        {
            "name": "AquaTemp",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nAquaTemp SDK\n@author ikubicki\n]]\nclass 'AquaTemp'\n\nAquaTemp.debug = false\n\nfunction AquaTemp:new(config)\n    self.config = config\n    self.token = Globals:get('aquatemp_xtoken', '')\n    self.token_time = tonumber(Globals:get('aquatemp_xtoken_time', 0))\n    self.http = HTTPClient:new({\n        baseUrl = config:getUrl()\n    })\n    return self\nend\n\n\nfunction AquaTemp:searchDevices(callback)\n    local buildDevice = function(data)\n        return {\n            id = data.device_id,\n            name = data.device_nick_name,\n            code = data.device_code,\n            product = data.product_id,\n            status = data.device_status\n        }\n    end\n    local deviceListCallback = function(response)\n        local devices = {}\n        if response.error_msg ~= \"Success\" then\n            QuickApp:error(\"Unable to pull AquaTemp devices: \" .. response.error_msg)\n            return callback(devices)\n        end\n        for _, d in ipairs(response.object_result) do\n            table.insert(devices, buildDevice(d))\n        end\n        callback(devices)\n    end\n    local authCallback = function(response)\n        AquaTemp:deviceList(deviceListCallback)\n    end\n    AquaTemp:auth(authCallback)\nend\n\nfunction AquaTemp:getProperties(callback, fail)\n    if self.config:getDeviceID() == \"\" or self.config:getDeviceID() == nil then\n        if fail ~= nil then\n            fail()\n        end\n        return\n    end\n    local getDeviceStatusCallback = function(statusResponse)  \n        local getDataByCodeCallback = function(dataResponse)\n            dataResponse[\"status\"] = statusResponse[\"status\"]\n            dataResponse[\"is_fault\"] = statusResponse[\"is_fault\"]\n            callback(dataResponse)\n        end\n        AquaTemp:getDataByCode(getDataByCodeCallback, fail)\n    end\n    local authCallback = function(response)\n        AquaTemp:getDeviceStatus(getDeviceStatusCallback, fail)\n    end\n    AquaTemp:auth(authCallback)\nend\n\nfunction AquaTemp:setPower(power, callback, fail)\n    if self.config:getDeviceID() == \"\" or self.config:getDeviceID() == nil then\n        if fail ~= nil then\n            fail()\n        end\n        return\n    end\n    local data = {\n        param = {{\n            device_code = self.config:getDeviceID(),\n            protocol_code = \"power\",\n            value = power,\n        }}\n    }\n    local authCallback = function(response)\n        AquaTemp:control(data, callback, fail)\n    end\n    AquaTemp:auth(authCallback)\nend\n\nfunction AquaTemp:setTemperature(temperature, callback, fail)\n    if self.config:getDeviceID() == \"\" or self.config:getDeviceID() == nil then\n        if fail ~= nil then\n            fail()\n        end\n        return\n    end\n    local data = {\n        param = {{\n            device_code = self.config:getDeviceID(),\n            protocol_code = \"Set_Temp\",\n            value = temperature,\n        },{\n            device_code = self.config:getDeviceID(),\n            protocol_code = \"R02\",\n            value = temperature,\n        },{\n            device_code = self.config:getDeviceID(),\n            protocol_code = \"R03\",\n            value = temperature,\n        }}\n    }\n    local authCallback = function(response)\n        AquaTemp:control(data, callback, fail)\n    end\n    AquaTemp:auth(authCallback)\nend\n\nfunction AquaTemp:setMute(mute, callback, fail)\n    if self.config:getDeviceID() == \"\" or self.config:getDeviceID() == nil then\n        if fail ~= nil then\n            fail()\n        end\n        return\n    end\n    local data = {\n        param = {{\n            device_code = self.config:getDeviceID(),\n            protocol_code = \"Manual-mute\",\n            value = mute,\n        }}\n    }\n    local authCallback = function(response)\n        AquaTemp:control(data, callback, fail)\n    end\n    AquaTemp:auth(authCallback)\nend\n\n-- pass: 022\nfunction AquaTemp:translateProperties(properties)\n    local newProperties = {\n        temperature_unit = \"C\",\n    }\n    -- if properties[\"O06\"] ~= nil then newProperties[\"pressure\"] = properties[\"T02\"] end\n    -- \"code\": \"2074\", \"value\": \"0000000000000000\" -> 0000001000000000 (E03)\n    if properties[\"T02\"] ~= nil then newProperties[\"inlet_temperature\"] = properties[\"T02\"] end\n    if properties[\"T03\"] ~= nil then newProperties[\"outlet_temperature\"] = properties[\"T03\"] end\n    if properties[\"T04\"] ~= nil then newProperties[\"coil_temperature\"] = properties[\"T04\"] end\n    if properties[\"T05\"] ~= nil then newProperties[\"ambient_temperature\"] = properties[\"T05\"] end\n    if properties[\"R01\"] ~= nil then newProperties[\"target_temperture_cool\"] = properties[\"R01\"] end\n    if properties[\"R02\"] ~= nil then newProperties[\"target_temperture_heat\"] = properties[\"R02\"] end\n    if properties[\"R03\"] ~= nil then newProperties[\"target_temperture_auto\"] = properties[\"R03\"] end\n    if properties[\"R10\"] ~= nil then newProperties[\"minimum_temperture\"] = properties[\"R10\"] end\n    if properties[\"R11\"] ~= nil then newProperties[\"maximum_temperture\"] = properties[\"R11\"] end\n    if properties[\"Mode\"] ~= nil then newProperties[\"mode\"] = properties[\"Mode\"] end\n    if properties[\"Power\"] ~= nil then newProperties[\"power\"] = properties[\"Power\"] end\n    if properties[\"Manual-mute\"] ~= nil then newProperties[\"mute\"] = properties[\"Manual-mute\"] end\n    if properties[\"Set_Temp\"] ~= nil then newProperties[\"temperature_setpoint\"] = properties[\"Set_Temp\"] end\n    if properties[\"H03\"] == 1 then newProperties[\"temperature_unit\"] = \"F\" end\n    return newProperties\nend\n\nfunction AquaTemp:formatProperties(data)\n    local properties = {}\n    for _, data in pairs(data) do\n        properties[data.code] = data.value\n    end\n    return self:translateProperties(properties)\nend\n\nfunction AquaTemp:getDataByCode(callback, fail, attempt)\n    if attempt == nil then\n        attempt = 1\n    end\n    if fail == nil then\n        fail = function(response)\n            QuickApp:error('Unable to pull data by code')\n            AquaTemp:setToken('')\n            if attempt < 2 then\n                attempt = attempt + 1\n                fibaro.setTimeout(3000, function()\n                    QuickApp:debug('AquaTemp:getDataByCode - Retry attempt #' .. attempt)\n                    local authCallback = function(response)\n                        self:getDataByCode(callback, nil, attempt)\n                    end\n                    AquaTemp:auth(authCallback)\n                end)\n            end\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if data.error_msg ~= \"Success\" then\n            fail(response)\n            return\n        elseif callback ~= nil then\n            callback(self:formatProperties(data.object_result))\n        end\n    end\n    local url = \"/app/device/getDataByCode.json\"\n    local headers = {\n        [\"x-token\"] = self:getToken(),\n        [\"Content-Type\"] = \"application/json; charset=utf-8\",\n    }\n    local data = {\n        device_code = self.config:getDeviceID(),\n        protocal_codes = {\n            \"Power\",\n            \"Mode\",\n            \"Manual-mute\",\n            \"Set_Temp\",\n            \"H03\",\n            \"R01\",\"R02\",\"R03\",\"R10\",\"R11\",\n            \"T02\",\"T03\",\"T04\",\"T05\"\n        }\n    }\n    self.http:post(url, data, success, fail, headers)\nend\n\nfunction AquaTemp:getDeviceStatus(callback, fail, attempt)\n    if attempt == nil then\n        attempt = 1\n    end\n    if fail == nil then\n        fail = function(response)\n            QuickApp:error('Unable to pull device status')\n            AquaTemp:setToken('')\n            if attempt < 2 then\n                attempt = attempt + 1\n                fibaro.setTimeout(3000, function()\n                    QuickApp:debug('AquaTemp:getDeviceStatus - Retry attempt #' .. attempt)\n                    local authCallback = function(response)\n                        self:getDeviceStatus(callback, nil, attempt)\n                    end\n                    AquaTemp:auth(authCallback)\n                end)\n            end\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if data.error_code ~= \"0\" then\n            fail(response)\n            return\n        elseif callback ~= nil then\n            callback(data.object_result)\n        end\n    end\n    local url = \"/app/device/getDeviceStatus.json\"\n    local headers = {\n        [\"x-token\"] = self:getToken(),\n        [\"Content-Type\"] = \"application/json; charset=utf-8\",\n    }\n    local data = {\n        device_code = self.config:getDeviceID(),\n    }\n    self.http:post(url, data, success, fail, headers)\nend\n\nfunction AquaTemp:deviceList(callback, fail, attempt)\n    if attempt == nil then\n        attempt = 1\n    end\n    if fail == nil then\n        fail = function(response)\n            QuickApp:error('Unable to pull devices')\n            AquaTemp:setToken('')\n            if attempt < 2 then\n                attempt = attempt + 1\n                fibaro.setTimeout(3000, function()\n                    QuickApp:debug('AquaTemp:deviceList - Retry attempt #' .. attempt)\n                    local authCallback = function(response)\n                        self:deviceList(callback, nil, attempt)\n                    end\n                    AquaTemp:auth(authCallback)\n                end)\n            end\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if callback ~= nil then\n            callback(data)\n        end\n    end\n    local url = \"/app/device/deviceList.json\"\n    local headers = {\n        [\"x-token\"] = self:getToken()\n    }\n    self.http:get(url, success, fail, headers)\nend\n\nfunction AquaTemp:control(data, callback, fail, attempt)\n    if attempt == nil then\n        attempt = 1\n    end\n    if fail == nil then\n        fail = function(response)\n            QuickApp:error('Unable to control the device')\n            QuickApp:error(json.encode(response))\n            AquaTemp:setToken('')\n            if attempt < 2 then\n                attempt = attempt + 1\n                fibaro.setTimeout(3000, function()\n                    QuickApp:debug('AquaTemp:control - Retry attempt #' .. attempt)\n                    local authCallback = function(response)\n                        self:deviceList(control, callback, nil, attempt)\n                    end\n                    AquaTemp:auth(authCallback)\n                end)\n            end\n        end\n    end\n    local success = function(response)\n        if response.status > 299 then\n            fail(response)\n            return\n        end\n        local data = json.decode(response.data)\n        if callback ~= nil then\n            callback(data)\n        end\n    end\n    local url = \"/app/device/control.json\"\n    local headers = {\n        [\"x-token\"] = self:getToken(),\n        [\"Content-Type\"] = \"application/json; charset=utf-8\",\n    }\n    self.http:post(url, data, success, fail, headers)\nend\n\n\n\nfunction AquaTemp:auth(callback)\n    if string.len(self.token) > 1 then\n        -- QuickApp:debug('Already authenticated')\n        if callback ~= nil then\n            callback({})\n        end\n        return\n    end\n    local fail = function(response)\n        -- QuickApp:debug(json.encode(response))\n        QuickApp:error('Unable to authenticate')\n        AquaTemp:setToken('')\n    end\n    local success = function(response)\n        local data = json.decode(response.data)\n        if data.error_msg ~= \"Success\" then\n            fail(response)\n            return\n        end\n        AquaTemp:setToken(data.object_result[\"x-token\"])\n        if callback ~= nil then\n            callback(data)\n        end\n    end\n    local url = \"/app/user/login.json\"\n    local headers = {\n        [\"Content-Type\"] = \"application/json\"\n    }\n    local data = {\n        user_name = self.config:getUsername(),\n        password = self.config:getPassword(),\n        type = 2\n    }\n    self.http:post(url, data, success, fail, headers)\nend\n\n-- token functions\n\n\n\nfunction AquaTemp:setToken(token)\n    self.token = token\n    self.token_time = os.time(os.date(\"!*t\"))\n    Globals:set('aquatemp_xtoken', token)\n    Globals:set('aquatemp_xtoken_time', self.token_time)\nend\n\nfunction AquaTemp:getToken()\n    if not self:checkTokenTime() then\n        self:setToken('')\n        return ''\n    end\n    if string.len(self.token) > 10 then\n        return self.token\n    elseif string.len(Globals:get('aquatemp_xtoken', '')) > 10 then\n        return Globals:get('aquatemp_xtoken', '')\n    end\n    return ''\nend\n\nfunction AquaTemp:checkTokenTime()\n    if self.token_time < 1 then\n        self.token_time = tonumber(Globals:get('aquatemp_xtoken_time', 0))\n    end\n    return self.token_time > 0 and os.time(os.date(\"!*t\")) - self.token_time < 43200\nend"
        },
        {
            "name": "Globals",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nGlobal variables handler\n@author ikubicki\n]]\nclass 'Globals'\n\nfunction Globals:get(name, alternative)\n    local response = api.get('/globalVariables/' .. name)\n    if response then\n        local char = string.sub(response.value, 1, 1)\n        if char == '{' or char == '\"' then\n            return json.decode(response.value)\n        end\n        return response.value\n    end\n    return alternative\nend\n\nfunction Globals:set(name, value)\n    local response = api.put('/globalVariables/' .. name, {\n        name = name,\n        value = json.encode(value)\n    })\n    if not response then\n        response = api.post('/globalVariables', {\n            name = name,\n            value = json.encode(value)\n        })\n        \n    end\n    if response ~= nil then\n        if response.type == 'ERROR' then\n            QuickApp:error('GLOBALS ERROR[' .. response.reason .. ']:', response.message)\n        end\n    end\nend"
        },
        {
            "name": "HTTPClient",
            "isMain": false,
            "isOpen": false,
            "content": "--[[\nHTTPClient wrapper\n@author ikubicki\n]]\nclass 'HTTPClient'\n\nfunction HTTPClient:new(options)\n    if not options then\n        options = {}\n    end\n    self.options = options\n    return self\nend\n\nfunction HTTPClient:get(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'GET', nil, headers)) \nend\n\nfunction HTTPClient:post(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers)) \nend\n\nfunction HTTPClient:postForm(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    headers[\"Content-Type\"] = 'application/x-www-form-urlencoded;charset=UTF-8'\n    client:request(self:url(url), self:requestOptions(success, error, 'POST', data, headers, true)) \nend\n\nfunction HTTPClient:put(url, data, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    client:request(self:url(url), self:requestOptions(success, error, 'PUT', data, headers)) \nend\n\nfunction HTTPClient:delete(url, success, error, headers)\n    local client = net.HTTPClient({timeout = 10000})\n    if not headers then\n        headers = {}\n    end\n    client:request(self:url(url), self:requestOptions(success, error, 'DELETE', nil, headers)) \nend\n\nfunction HTTPClient:url(url)\n    if (string.sub(url, 0, 4) == 'http') then\n        return url\n    end\n    if not self.options.baseUrl then\n        self.options.baseUrl = 'http://localhost'\n    end\n    return self.options.baseUrl .. tostring(url)\nend\n\nfunction HTTPClient:requestOptions(success, error, method, data, headers, isFormData)\n    if error == nil then\n        error = function (error)\n            QuickApp:error(json.encode(error))\n        end\n    end\n    if method == nil then\n        method = 'GET'\n    end\n    local options = {\n        checkCertificate = false,\n        method = method,\n        headers = headers,\n    }\n    if data ~= nil then\n        if isFormData then\n            options.data = ''\n            for key, value in pairs(data) do\n                if string.len(options.data) > 0 then \n                    options.data = options.data .. '&'\n                end\n                options.data = options.data .. key .. '=' .. value\n            end\n        elseif type(data) == 'string' then\n            options.data = data\n        else\n            options.data = json.encode(data)\n        end\n    end\n    return {\n        options = options,\n        success = success,\n        error = error\n    }\nend"
        }
    ]
}